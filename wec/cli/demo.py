# cli/demo.py — пример запуска анализа WEC из командной строки
"""Демонстрационный скрипт, моделирующий 23 варианта графика N_гар
для одной и той же бытовой приточности.

* **DOMESTIC** — средние притоки Q_быт (м³/с) по месяцам (устойчивый
  гидрологический год).
* **geometry_by_variant** — сопоставление variant_id → набор кривых
  наполнение‑отметка и Q–Z.  Три группы (A, B, C) отражают разные
  типы водохранилищ.
* **guaranteed_by_variant** — словарь «вариант → вектор N_гар, МВт».

Скрипт проходит по вариантам 1‥23:
1. Формирует объекты *Geometry*, *StaticLevels*, *HydrologicalSeries*.
2. Создаёт фасад **WECAnalyzer** и запускает симуляцию с оптимизатором
   "dynamic" (метод динамического программирования).
3. Печатает DataFrame результатов и строит график уровней водохранилища.

Запуск:

```bash
python -m cli.demo
```
"""

from __future__ import annotations

from wec import Geometry, StaticLevels, HydrologicalSeries, WECAnalyzer


def main() -> None:
    # ------------------------------------------------------------------
    # 0) Исходные гидрологические данные
    # ------------------------------------------------------------------
    DOMESTIC = [540, 450, 740, 2850, 3500, 1100, 750, 630, 450, 465, 560, 410]  # Q_быт, м³/с
    INSTALLED = 500  # МВт (одинаково для всех вариантов)
    MONTHS = list(range(1, 13))  # 1 … 12

    # ------------------------------------------------------------------
    # 1) Базовые геометрии (A, B, C) -----------------------------------
    # ------------------------------------------------------------------
    # Храним в словарях, чтобы потом раскидать по variant_id
    geom_A = dict(
        headwater_marks=[87, 89, 91, 93, 95, 97, 99, 101, 103],
        average_volumes=[0.1, 0.4, 0.9, 2.3, 4.6, 8.8, 14.6, 21, 29.3],
        lowwater_marks=[81, 83, 85, 87, 89, 91],
        lowwater_inflows=[100, 460, 1200, 2250, 3800, 5100],
        nrl=102, dead=97
    )

    geom_B = dict(
        headwater_marks=[110.6, 115, 120, 125, 130, 135, 138],
        average_volumes=[0, 0.15, 0.2, 0.35, 0.83, 1.38, 2],
        lowwater_marks=[109.1, 109.5, 110, 111, 112, 113],
        lowwater_inflows=[309, 492, 721, 1500, 2660, 4000],
        nrl=138, dead=137
    )

    geom_C = dict(
        headwater_marks=[455.5, 455.75, 456, 456.5, 456.75, 457, 457.25, 457.5, 459],
        average_volumes=[15.75, 23.62, 31.5, 47.25, 55.12, 63, 71, 77, 94.5],
        lowwater_marks=[431, 431.5, 432.5, 433.5, 434, 434.5, 435.0, 436.0],
        lowwater_inflows=[1000, 1500, 3350, 6100, 7900, 9900, 12200, 16000],
        nrl=458, dead=438
    )

    # ------------------------------------------------------------------
    # 2) Сопоставление variant_id → геометрия ---------------------------
    # ------------------------------------------------------------------
    geometry_by_variant = {
        **{vid: geom_A for vid in range(1, 8)},
        **{vid: geom_B for vid in range(8, 18)},
        **{vid: geom_C for vid in range(18, 24)},
    }

    # ------------------------------------------------------------------
    # 3) Словарь гарантированной мощности для каждого варианта ---------
    # ------------------------------------------------------------------
    guaranteed_by_variant = {
        1: [150, 130, 130, 200, 220, 160, 85, 100, 60, 130, 150, 140],
        2: [150, 115, 110, 200, 200, 150, 50, 70, 70, 120, 140, 140],
        3: [120, 130, 135, 220, 190, 150, 85, 100, 70, 140, 150, 130],
        4: [145, 120, 125, 190, 240, 120, 100, 95, 60, 130, 130, 150],
        5: [140, 155, 110, 230, 230, 160, 30, 100, 60, 100, 110, 130],
        6: [150, 130, 135, 180, 180, 160, 60, 65, 70, 130, 155, 140],
        7: [130, 130, 135, 220, 200, 140, 50, 50, 50, 140, 140, 140],
        8: [120, 110, 110, 190, 250, 120, 60, 70, 60, 135, 150, 140],
        9: [150, 115, 100, 230, 230, 130, 85, 90, 65, 120, 140, 140],
        10: [130, 110, 110, 260, 250, 160, 70, 60, 65, 110, 130, 130],
        11: [130, 130, 140, 200, 230, 115, 100, 70, 60, 120, 150, 140],
        12: [160, 115, 150, 180, 180, 140, 50, 50, 50, 130, 140, 140],
        13: [150, 130, 135, 200, 220, 160, 70, 75, 70, 110, 155, 140],
        14: [150, 115, 110, 190, 200, 115, 80, 45, 50, 130, 130, 140],
        15: [120, 110, 115, 210, 200, 135, 60, 70, 75, 135, 150, 140],
        16: [130, 125, 125, 190, 180, 100, 45, 60, 40, 125, 150, 140],
        17: [130, 120, 125, 200, 215, 160, 90, 80, 60, 110, 150, 140],
        18: [150, 150, 115, 190, 240, 160, 70, 75, 70, 130, 140, 150],
        19: [150, 110, 130, 190, 210, 175, 60, 55, 55, 110, 140, 140],
        20: [110, 120, 130, 220, 200, 115, 60, 70, 55, 125, 150, 145],
        21: [110, 120, 115, 120, 180, 105, 50, 40, 60, 140, 140, 130],
        22: [115, 120, 130, 210, 170, 100, 90, 80, 70, 110, 110, 115],
        23: [160, 115, 120, 180, 180, 140, 50, 64, 50, 110, 115, 100],
    }

    # ------------------------------------------------------------------
    # 4) Основной цикл по вариантам ------------------------------------
    # ------------------------------------------------------------------
    for vid in range(1, 24):
        # --- 4.1 Создание объектов конфигурации ---
        gsrc = geometry_by_variant[vid]
        geom = Geometry(
            headwater_marks=gsrc["headwater_marks"],
            average_volumes=gsrc["average_volumes"],
            lowwater_marks=gsrc["lowwater_marks"],
            lowwater_inflows=gsrc["lowwater_inflows"],
        )
        levels = StaticLevels(
            nrl=gsrc["nrl"], dead=gsrc["dead"], installed_capacity=INSTALLED
        )
        series = HydrologicalSeries(
            months=MONTHS,
            domestic_inflows=DOMESTIC,
            guaranteed_capacity=guaranteed_by_variant[vid],
        )

        # --- 4.2 Запуск анализа ---
        wec = WECAnalyzer(geom, levels, series)
        df_wec = wec.simulate("dynamic")  # используем DP‑оптимизатор

        # --- 4.3 Вывод и визуализация ---
        print(f"\n=== Вариант {vid} ===")
        print(df_wec)
        wec.plot_reservoir_levels(df_wec)

    # Пользователь при желании может раскомментировать базовые графики:
    # wec.plot_domestic_inflow()
    # wec.plot_guaranteed_capacity()


if __name__ == "__main__":
    main()
